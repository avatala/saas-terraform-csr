# /*
#  * Copyright 2022 Google LLC. 
#  * 
#  * This software is provided as-is, without warranty or representation for any use or purpose. 
#  * Your use of it is subject to your agreement with Google.
#  */
steps:
  - name: '${_PRE_REQ_REGION}-docker.pkg.dev/$PROJECT_ID/saas-cloud-build/saas-cloud-build-${_PREFIX}:latest'
    dir: gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/custom_dashboard/
    entrypoint: 'bash'
    env:
      - "_CUSTOMER_NAME=${_CUSTOMER_NAME}"
      - "_APIGEE=${_APIGEE}"
    args:
    - '-c'
    - |
      git fetch > /dev/null 2>&1
      git checkout ${_BRANCH_NAME}
      if [ "${_LB_TYPE}" = "http" ] && [ "${_APIGEE}" = "false"  ]; then
        sed -e "s/REGION/$$_CUSTOMER_REGION/g" -e "s/BUILD_PROJECT_ID/$PROJECT_ID/g" -e "s/CUSTOMER_NAME/${_CUSTOMER_NAME}/g" -e "s/BUILD_ID/$BUILD_ID/g" -e "s/FUNCTION_URI/`echo $$_CLOUD_FUNCTION_URI | sed 's#https://##'`/g" script.sh.tpl > script.sh;
        sh script.sh
        rm -rf script.sh
      elif [ "${_LB_TYPE}" = "http" ] && [ "${_APIGEE}" = "true"  ]; then 
        sed -e "s/REGION/$$_CUSTOMER_REGION/g" -e "s/BUILD_PROJECT_ID/$PROJECT_ID/g" -e "s/CUSTOMER_NAME/${_CUSTOMER_NAME}/g" -e "s/BUILD_ID/$BUILD_ID/g" -e "s/FUNCTION_URI/`echo $$_CLOUD_FUNCTION_URI | sed 's#https://##'`/g" appigee.sh.tpl > appigee.sh;
        sh appigee.sh
        rm -rf appigee.sh
      else
        sed -e "s/REGION/$$_CUSTOMER_REGION/g" -e "s/BUILD_PROJECT_ID/$PROJECT_ID/g" -e "s/CUSTOMER_NAME/${_CUSTOMER_NAME}/g" -e "s/BUILD_ID/$BUILD_ID/g" -e "s/FUNCTION_URI/`echo $$_CLOUD_FUNCTION_URI | sed 's#https://##'`/g" script-tcp.sh.tpl > script-tcp.sh;
        sh script-tcp.sh
        rm -rf script-tcp.sh
      fi
    secretEnv: ['_CLOUD_FUNCTION_URI','_CUSTOMER_REGION']

  - name: '${_PRE_REQ_REGION}-docker.pkg.dev/$PROJECT_ID/saas-cloud-build/saas-cloud-build-${_PREFIX}:latest'
    dir: gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/custom_dashboard
    id: Remove Directory
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      sed  -e "s/CUSTOMER_NAME/$$_CUSTOMER_NAME/g" setup.py.tpl > setup.py;
      python3 setup.py 
      git add .
      if [ -n "$(git status --porcelain)" ]; then
        echo "There are changes";
        git config --global user.email "$$_CUSTOMER_EMAIL"
        git config --global user.name "$$_CUSTOMER_NAME"
        git commit -m "client $$_CUSTOMER_NAME's custom dashbaord deleted"
        git push --set-upstream origin ${_BRANCH_NAME}
      else
        echo "No changes are there";
        exit
      fi
    secretEnv: ['_CUSTOMER_EMAIL', '_CUSTOMER_NAME']

  - name: '${_PRE_REQ_REGION}-docker.pkg.dev/$PROJECT_ID/saas-cloud-build/saas-cloud-build-${_PREFIX}:latest'
    dir: gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/custom_dashboard/
    entrypoint: 'bash'
    args:
    - '-eEuo'
    - 'pipefail'
    - '-c'
    - |-
      git config --global user.email "$$_CUSTOMER_EMAIL"
      git config --global user.name "$$_CUSTOMER_NAME"
      mkdir -p ../$$_CUSTOMER_NAME-custom-dashboard/
      Enterprise_Project_Number=$(gcloud projects describe $$_ENTERPRISE_PROJECT_ID  --format='value(projectNumber)')
      export Enterprise_Project_Number
      for file in *.tpl; do envsubst < $file > $(basename $file .tpl); done
      cp -rf ./* ../$$_CUSTOMER_NAME-custom-dashboard/
      cd ../$$_CUSTOMER_NAME-custom-dashboard/
      git add .
      git commit -m "client $$_CUSTOMER_NAME's custom dashbaord created"
      git push --set-upstream origin ${_BRANCH_NAME}
    secretEnv: ['_CUSTOMER_EMAIL','TF_STATE_BUCKET_NAME','_CUSTOMER_NAME','_ENTERPRISE_PROJECT_ID','HOST_PROJECT_ID']

  - name: 'hashicorp/terraform:1.0.7'
    dir: "gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/${_CUSTOMER_NAME}-custom-dashboard"
    args:
      - '-c'
      - |
        terraform init
    id: terraform init
    entrypoint: sh

  - name: 'hashicorp/terraform:1.0.7'
    dir: "gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/${_CUSTOMER_NAME}-custom-dashboard"
    args:
      - '-c'
      - |
        terraform fmt
    id: terraform fmt
    entrypoint: sh

  - name: 'hashicorp/terraform:1.0.7'
    dir: "gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/${_CUSTOMER_NAME}-custom-dashboard"
    args:
      - '-c'
      - |
        terraform validate
    id: terraform validate
    entrypoint: sh

  - name: 'hashicorp/terraform:1.0.7'
    dir: "gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/${_CUSTOMER_NAME}-custom-dashboard"
    args:
      - '-c'
      - |
        terraform plan
    id: terraform plan
    entrypoint: sh

  - name: 'hashicorp/terraform:1.0.7'
    dir: "gcp-deployment/single-tenant/terraform/env/saas/global/custom-monitoring/${_CUSTOMER_NAME}-custom-dashboard"
    args:
      - '-c'
      - |
        terraform apply -input=false -auto-approve
    id: terraform apply
    entrypoint: sh

  - name: "gcr.io/cloud-builders/gcloud"
    id: Removing Owner Permission
    entrypoint: sh
    args:
    - '-c'
    - |-
      project_id=$(gcloud info --format='value(config.project)')
      export project_id
      for id in $$_ENTERPRISE_PROJECT_ID
      do
      gcloud projects remove-iam-policy-binding $id --member="serviceAccount:saas-cloudbuild-sa@$project_id.iam.gserviceaccount.com" --role='roles/owner' >/dev/null
      done
    secretEnv: ['_ENTERPRISE_PROJECT_ID']

  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        gcloud run services update ${_PREFIX}-iap-gcip-hosted-ui-lb-backend --project=$$HOST_PROJECT_ID --timeout=80 --region=${_PRE_REQ_REGION}
        gcloud alpha builds triggers run ${_CUSTOMER_NAME}-single-tenant-secret-destroy-saas-trigger --branch=${_BRANCH_NAME} --region $$_CUSTOMER_REGION
    id: 'trigger next build'
    secretEnv: ['_CUSTOMER_REGION','HOST_PROJECT_ID']

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_NUMBER/secrets/${_CUSTOMER_NAME}-CUSTOMER_NAME/versions/latest
    env: _CUSTOMER_NAME
  - versionName: projects/$PROJECT_NUMBER/secrets/${_CUSTOMER_NAME}-CUSTOMER_EMAIL/versions/latest
    env: _CUSTOMER_EMAIL
  - versionName: projects/$PROJECT_NUMBER/secrets/${_CUSTOMER_NAME}-TF_STATE_BUCKET_NAME/versions/latest
    env: TF_STATE_BUCKET_NAME
  - versionName: projects/$PROJECT_NUMBER/secrets/${_CUSTOMER_NAME}-ENTERPRISE_PROJECT_ID/versions/latest
    env: _ENTERPRISE_PROJECT_ID
  - versionName: projects/$PROJECT_NUMBER/secrets/${_PREFIX}_HOST_PROJECT_ID/versions/latest
    env: HOST_PROJECT_ID
  - versionName: projects/$PROJECT_NUMBER/secrets/${_PREFIX}_CLOUD_FUNCTION_URI/versions/latest
    env: _CLOUD_FUNCTION_URI
  - versionName: projects/$PROJECT_NUMBER/secrets/${_CUSTOMER_NAME}-CUSTOMER_REGION/versions/latest
    env: _CUSTOMER_REGION
    
logsBucket: 'gs://${_LOG_BUCKET_NAME}'
options:
    logging: GCS_ONLY