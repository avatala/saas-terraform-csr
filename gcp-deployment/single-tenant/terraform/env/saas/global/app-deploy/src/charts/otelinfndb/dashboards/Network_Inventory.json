{
  "__inputs": [
    {
      "name": "DS_INFLUXDB-FLUX",
      "label": "InfluxDB-Flux",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "10.1.1"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "InfluxDB-Flux"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "query": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(bucket: \"xr-1m\", tag: \"sn\")\r\n|>count()",
          "refId": "A"
        }
      ],
      "title": "# of devices",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "InfluxDB-Flux"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Module Details",
              "url": "/d/d162fd2f-1fab-405b-b376-72121202a6e2-25/test-and-turnup-summary?orgId=1&${__url_time_range}&di=${__data.fields.di}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Device ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 364
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Role"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 103
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Device Type"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 104
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 210
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "di {_time=\"2023-10-19 20:58:20 +0000 UTC\", di=\"0cc1b779-80d4-460a-412f-c7bc24f4887e\", dt=\"xr\", network=\"sjc-xr\", role=\"hub\", sn=\"f4887e\"}"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 373
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sn"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 141
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Line_Temp_IN_RANGE"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 178
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Laser_Temp_IN_RANGE"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 191
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Line_OPT_IN_RANGE"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 232
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.IN_RANGE/"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.ok/"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "role"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 76
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "dsc_not_acquired"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 138
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "dsc_ok"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 86
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "dsc_not_configured"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 161
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 16,
        "w": 20,
        "x": 4,
        "y": 0
      },
      "id": 5,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": true,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "count"
          ],
          "show": true
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "hide": false,
          "query": "  import \"math\"\r\nXR_LINE_TEMP_MIN = -5\r\nXR_LINE_TEMP_MAX = 75\r\nfrom(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gauge\")\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"xr.lineptp.case_temp\")\r\n  |> filter(fn: (r) => r[\"network\"] == \"${network}\")\r\n  |> last()\r\n\r\n  |> pivot(rowKey:[\"di\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> rename(columns: {\"xr.lineptp.case_temp\": \"case_temp\"})    \r\n  |> map(fn: (r) => ({ r with Line_Temp_IN_RANGE : if math.abs(x: r.case_temp) <= XR_LINE_TEMP_MAX and math.abs(x: r.case_temp) >= XR_LINE_TEMP_MIN then true else false }))\r\n  |> keep(columns: [\"di\", \"sn\", \"role\", \"Line_Temp_IN_RANGE\"])  \r\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "hide": false,
          "query": "import \"math\"\r\nXR_LINE_LASER_TEMP_MIN = 35\r\nXR_LINE_LASET_TEMP_MAX = 65\r\nfrom(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gauge\")\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"xr.lineptp.laser_temp\")\r\n  |> last()\r\n   |> filter(fn: (r) => r[\"network\"] == \"${network}\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> rename(columns: {\"xr.lineptp.laser_temp\": \"laser_temp\"})    \r\n  |> map(fn: (r) => ({ r with Laser_Temp_IN_RANGE : if math.abs(x: r.laser_temp) <= XR_LINE_LASET_TEMP_MAX and math.abs(x: r.laser_temp) >= XR_LINE_LASER_TEMP_MIN then true else false }))\r\n    |> keep(columns: [\"di\", \"sn\", \"Laser_Temp_IN_RANGE\"])  \r\n",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "hide": false,
          "query": "// (\"xr.lineptp.opt\" >= -18 and <= 4) and\r\n\r\nimport \"math\"\r\nXR_LINE_OPT_MIN = -18\r\nXR_LINE_OPT_MAX = 4\r\nfrom(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gauge\")\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"xr.lineptp.opt_tx_ne\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n   |> filter(fn: (r) => r[\"network\"] == \"${network}\")\r\n  |> last()\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> rename(columns: {\"xr.lineptp.opt_tx_ne\": \"lineptp_opt_tx_ne\"})    \r\n  |> map(fn: (r) => ({ r with Line_OPT_IN_RANGE : if math.abs(x: r.lineptp_opt_tx_ne) <= XR_LINE_OPT_MAX and math.abs(x: r.lineptp_opt_tx_ne) >= XR_LINE_OPT_MIN then true else false }))\r\n    |> keep(columns: [\"di\", \"sn\", \"Line_OPT_IN_RANGE\"])  \r\n       ",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "hide": false,
          "query": "// (\"xr.lineptp.opr\" >= -16 and <= 4)\r\nimport \"math\"\r\nXR_LINE_OPR_MIN = -18\r\nXR_LINE_OPR_MAX = 4\r\nfrom(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gauge\")\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"xr.lineptp.opr_rx_ne\")\r\n   |> filter(fn: (r) => r[\"network\"] == \"${network}\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> last()\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> rename(columns: {\"xr.lineptp.opr_rx_ne\": \"lineptp_opr_rx_ne\"})    \r\n  |> map(fn: (r) => ({ r with Line_OPR_IN_RANGE : if math.abs(x: r.lineptp_opr_rx_ne) <= XR_LINE_OPR_MAX and math.abs(x: r.lineptp_opr_rx_ne) >= XR_LINE_OPR_MIN then true else false }))\r\n    |> keep(columns: [\"di\", \"sn\", \"_time\", \"Line_OPR_IN_RANGE\"])\r\n",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "hide": false,
          "query": "dsc_nc_threshold = 0\r\ndsc_pd_threshold = .25\r\ndsc_na_threshold = 0.144742\r\n\r\ndata = from(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_field\"] == \"gauge\")\r\n  |> filter(fn: (r) => r[\"network\"] == \"${network}\")\r\n\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"xr.dsc.pre_fec_ber_rx_ne\")\r\n    |> last()   \r\n     |> group(columns: [\"di\", \"_measurement\"])\r\n    |> reduce(\r\n                identity: {dsc_not_configured: 0.0, dsc_ok:0.0, dsc_power_down:0.0, dsc_not_acquired:0.0 },\r\n                fn: (r, accumulator) => ({\r\n                    dsc_not_configured: if r._value == dsc_nc_threshold then\r\n                        accumulator.dsc_not_configured + 1.0\r\n                    else\r\n                        accumulator.dsc_not_configured + 0.0,\r\n                    dsc_power_down: if r._value == dsc_pd_threshold then\r\n                        accumulator.dsc_power_down + 1.0\r\n                    else\r\n                        accumulator.dsc_power_down + 0.0,\r\n                    dsc_not_acquired: if r._value == dsc_na_threshold then\r\n                        accumulator.dsc_not_acquired + 1.0\r\n                    else\r\n                        accumulator.dsc_not_acquired + 0.0,\r\n                    dsc_ok : if (r._value != dsc_nc_threshold and r._value != dsc_pd_threshold and r._value != dsc_na_threshold) then\r\n                        accumulator.dsc_ok + 1.0\r\n                    else\r\n                        accumulator.dsc_power_down + 0.0,\r\n                }),\r\n   )\r\n  \r\n |> keep(columns: [\"network\", \"di\", \"sn\", \"dsc_not_acquired\", \"dsc_not_configured\", \"dsc_ok\", \"dsc_power_down\"])\r\n\r\n   |> yield(name: \"dsc_state\")    ",
          "refId": "E"
        }
      ],
      "title": "Device Inventory - $network",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {}
        },
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Laser_Temp_IN_RANGE": 3,
              "Line_OPR_IN_RANGE": 5,
              "Line_OPT_IN_RANGE": 4,
              "Line_Temp_IN_RANGE": 2,
              "di": 1,
              "sn": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "InfluxDB-Flux"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Device Inventory $network",
              "url": "/d/f36a646f-6afd-411f-bbc1-daf56b9d1625/d-device-inventory?orgId=1&var-network=${__data.fields.Network}﻿&${__url_time_range}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Device ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 364
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Role"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 103
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Device Type"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 104
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 210
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "di {_time=\"2023-10-19 20:58:20 +0000 UTC\", di=\"0cc1b779-80d4-460a-412f-c7bc24f4887e\", dt=\"xr\", network=\"sjc-xr\", role=\"hub\", sn=\"f4887e\"}"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 373
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 16,
        "w": 4,
        "x": 0,
        "y": 3
      },
      "id": 1,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": true
        },
        "frameIndex": 2,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.1.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Flux"
          },
          "query": "from(bucket: \"xr-1m\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /case_temp/)\r\n  |> filter(fn:(r) => r[\"_field\"] == \"gauge\")\r\n  |> last()\r\n  |> group(columns: [\"network\"], mode:\"by\")\r\n  |> count()\r\n",
          "refId": "A"
        }
      ],
      "title": "Device Inventory",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {}
        },
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "_value": 1,
              "network": 0
            },
            "renameByName": {
              "_value": "# of devices",
              "network": "Network"
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "InfluxDB-Flux"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(bucket: \"xr-1m\", tag: \"network\")",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "network",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(bucket: \"xr-1m\", tag: \"network\")",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Network Inventory",
  "uid": "d8646458-61a7-42cd-a305-b3adac318907",
  "version": 7,
  "weekStart": ""
}