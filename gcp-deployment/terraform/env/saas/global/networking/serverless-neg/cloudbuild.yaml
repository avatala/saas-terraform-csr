# /*
#  * Copyright 2022 Google LLC. 
#  * 
#  * This software is provided as-is, without warranty or representation for any use or purpose. 
#  * Your use of it is subject to your agreement with Google.
#  */
steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Generate manifest for deployment
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    entrypoint: /bin/sh
    args:
      - '-c'
      - | 
        sed -e "s/TF_BUCKET_NAME/${_TFSTATE_GCS_BUCKET_NAME}/g" -e "s/PREFIX_NAME/${_PREFIX}/g" -e "s/REGION_NAME/${_REGION}/g" terraform.tfvars.tpl > terraform.tfvars;
        sed -e "s/TF_BUCKET_NAME/${_TFSTATE_GCS_BUCKET_NAME}/g" -e "s/PREFIX_NAME/${_PREFIX}/g"  backend.tf.tpl > backend.tf
  - name: 'hashicorp/terraform:1.0.7'
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    args:
      - '-c'
      - |
        terraform init
    id: terraform init
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.7'
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    args:
      - '-c'
      - |
        terraform fmt
    id: terraform fmt
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.7'
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    args:
      - '-c'
      - |
        terraform validate
    id: terraform validate
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.7'
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    args:
      - '-c'
      - |
        terraform plan
    id: terraform plan
    entrypoint: sh
  - name: 'hashicorp/terraform:1.0.7'
    dir: gcp-deployment/terraform/env/saas/global/networking/serverless-neg
    args:
      - '-c'
      - |
        terraform apply -input=false -auto-approve
    id: terraform apply
    entrypoint: sh

  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    env:
      - "_LB_TYPE=${_LB_TYPE}"
    args: 
      - '-c'
      - |
        if [ "${_LB_TYPE}" = "http" ]; then
        gcloud alpha builds triggers run certificate-${_PREFIX}-trigger --branch=${_BRANCH_NAME}
        elif [ "${_SSL_PROXY}" = "true" ]; then
        gcloud alpha builds triggers run certificate-${_PREFIX}-trigger --branch=${_BRANCH_NAME}
        else
        gcloud alpha builds triggers run tcp-mig-${_PREFIX}-trigger --branch=${_BRANCH_NAME}
        fi
    id: 'trigger next build'

logsBucket: 'gs://${_LOGS_GCS_BUCKET_NAME}'
options:
  logging: GCS_ONLY
timeout: 86400s